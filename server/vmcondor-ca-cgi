#!/usr/bin/python
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-9. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch
#


import os
import sys
import time
import random
import tempfile
import M2Crypto

archivedDir = '/var/lib/vmcondor-ca/archived'
incomingDir = '/var/lib/vmcondor-ca/incoming'
approvedDir = '/var/lib/vmcondor-ca/approved'

def getRequest():  
  return M2Crypto.X509.load_request_bio(M2Crypto.BIO.MemoryBuffer(sys.stdin.read()))

def createArchivedFile():

  lastUsername = sorted(['user0000'] + os.listdir(archivedDir))[-1]

  for i in xrange(1,10):
    try:
      newUsername = 'user%04d' % (int(lastUsername[4:]) + i)
      fd = os.open(archivedDir + '/' + newUsername, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
    except Exception as e:
      print str(e)
      continue
    else:
      os.write(fd, 'UNIX_TIME=%d\n' % int(time.time()))
      os.write(fd, 'DATE_TIME=%s UTC\n' % time.asctime(time.gmtime()))
    
      for header in ('HTTP_USER_AGENT', 'REMOTE_ADDR', 'REMOTE_HOST'):
        try:
          os.write(fd, '%s=%s\n' % (header, os.environ[header]))
        except:
          pass

      os.close(fd)
      return newUsername
      
  raise Exception('Unable to create archived file')

def createIncomingFile(newUsername):

  contents = open(archivedDir + '/' + newUsername, 'r').read()

  fd = os.open(incomingDir + '/' + newUsername, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
  os.write(fd, contents)
  os.close(fd)    

def makeCert(username, req):

  newCert = M2Crypto.X509.X509()
  newCert.set_serial_number(int(username[4:]))
  newCert.set_version(2)
  newCert.set_pubkey(req.get_pubkey())

  subject    = M2Crypto.X509.X509_Name()
  subject.O  = 'vmcondor.iris.ac.uk'
  subject.CN = username
  newCert.set_subject(subject)

  caCert = M2Crypto.X509.load_cert('/etc/grid-security/VMCondorCA00.pem')
  newCert.set_issuer(caCert.get_issuer())

  notBefore = M2Crypto.m2.x509_get_not_before(newCert.x509)
  notAfter  = M2Crypto.m2.x509_get_not_after(newCert.x509)
  M2Crypto.m2.x509_gmtime_adj(notBefore, 0)
  M2Crypto.m2.x509_gmtime_adj(notAfter, 60*60*24*365)

  newCert.add_ext(M2Crypto.X509.new_extension('basicConstraints', 'CA:FALSE', 1))
  newCert.add_ext(M2Crypto.X509.new_extension('keyUsage', 'Digital Signature, Key Encipherment, Data Encipherment', 1))
  newCert.add_ext(M2Crypto.X509.new_extension('extendedKeyUsage', 'TLS Web Client Authentication', 1))

  caKey = M2Crypto.RSA.load_key('/etc/grid-security/VMCondorCA00key.pem')
  caKeyEVP = M2Crypto.EVP.PKey()
  caKeyEVP.assign_rsa(caKey)
  newCert.sign(caKeyEVP, 'sha256')
  
  return newCert

#
# PROGRAM MAIN
#

try:
  req = getRequest()
except:
  print 'Status: 500 Failed to read request'
  print
  sys.exit(0)

username  = createArchivedFile()
createIncomingFile(username)
newCert  = makeCert(username, req)

print 'Status: 200 OK'
print 'Content-Type: text/plain'
print
print newCert.as_pem()

sys.exit(0)
